== 생각의 흐름 ==

역시... 기간 내 개발을 하려면 실시간 PVP 대전 게임

== 브레인스토밍 ==

* 얼음장과 같이 미끄러운 바닥
* 잘 미끄러지는 드럼통
* 플레이어들은 아이스하키 퍽을 치는 것과 같은 방식으로 서로에게 드럼통을 밀어내서 공격
* 랜덤매칭 1 vs 1
* 사방의 벽
* 당구 액션? (쿠션)
* 캡슐맨 - 플레이어
* 하키에서의 퍽

== 가제 ==

[1] 마이크로 퍽 게임 (micro puck game)

하키 퍽을 치는 것 같은 게임에 착안한 이름.

[2] 배틀 스쿼시 (battle squash)

PVP를 좀 더 강조한 이름. 스포츠 스쿼시를 떠올려주면 가장 좋지만...
안드로이드 마켓에서 영문 squash는 스포츠로서의 스쿼시가 아니라
매치3 게임 혹은 뭔갈 짓눌러 죽이는 단순 게임을 일컫는 것으로 보임

== 핵심재미 ==

* 쉽고 빠르게 한판 대결할 수 있는 단순 대전 액션
* 랭킹 경쟁
* 1분 이내
* 1vs1 기본

== 매커니즘 ==


[1] 레벨

레벨은 단순 정사각형이며, 시점은 3인칭 탑뷰를 택해 논리적으로는 2D 게임이나,
그래픽은 3D로 하여 입체감은 살린다.

화면 모드는 가로모드이다.

[2] 매칭과 경기 시작

게임 실행 시 구글 로그인 후 바로 자동 매칭 신청이 된다.
1:1 매칭이 되면, 경기가 시작된다.
경기는 최대 50초 동안 진행된다.

[4] 구성요소

* 플레이어A
* 플레이어B
* 퍽

물리 시뮬레이션 및 접촉 판정 시 플레이어와 퍽 모두 구 형태의 충돌 상자로
처리된다.

[3] 조작

* 상하좌우 이동 - 스크린 왼쪽 버추얼 패드
* 대시(dash) - 스크린 오른쪽 버튼
  - 사용 회수에는 제한이 없으나, 쿨타임이 있다.

[4] 전투 및 점수 규칙

플레이어는 각자 HP가 있으며 상대방의 HP를 0으로 먼저 만드는 플레이어가 승리한다.
경기 시작 시 플레이어는 20 HP로 시작한다.

퍽은 HP는 없고(무적이고) 충격량을 가진다. 충격량은 경기 시작 시 1로 시작한다.

플레이어는 정지 상태, 이동 상태, 대시 상태 중 하나의 상태이다.

퍽은 정지 상태, 이동 상태 중 하나의 상태이다. 이하부터 각각 상태의 퍽을 '정지 퍽', '이동 퍽'이라 칭한다.

<각 상태에 따른 플레이어-퍽 간 접촉 시 처리 표>
+---------------+---------+-------------------------------------------------+
| 플레이어 상태 | 퍽 상태 |  접촉 시 처리                                   |
+---------------+---------+-------------------------------------------------+
| 정지          | 정지    |  없음                                           |
| 이동          | 정지    |  이동 퍽으로 변경되며, 물리 법칙으로 퍽 운동    |
| 대시          | 정지    |  이동 퍽으로 변경되며, 물리 법칙으로 퍽 운동    |
| 정지          | 이동    |  플레이어 HP 감소, 물리 법칙으로 퍽 운동        |
| 이동          | 이동    |  플레이어 HP 감소, 물리 법칙으로 퍽 운동        |
| 대시          | 이동    |  물리 법칙으로 퍽 운동                          |
+---------------+---------+-------------------------------------------------+

<각 상태에 따른 플레이어-플레이어 간 접촉 시 처리 표>
기본적으로 대시 상태의 플레이어가 비대시 상태의 플레이어에게 데미지를 준다.
둘 다 대시 상태에서 접촉 시 둘 모두에게 데미지를 준다.
+----------------+----------------+-----------------------------------------+
| 플레이어A 상태 | 플레이어B 상태 |  접촉 시                                |
+----------------+----------------+-----------------------------------------+
| 정지           | 정지           |  없음                                   |
| 이동           | 정지           |  없음                                   |
| 대시           | 정지           |  플레이어B HP 1 감소                    |
| 정지           | 이동           |  없음                                   |
| 이동           | 이동           |  없음                                   |
| 대시           | 이동           |  플레이어B HP 1 감소                    |
| 정지           | 대시           |  플레이어A HP 1 감소                    |
| 이동           | 대시           |  플레이어A HP 1 감소                    |
| 대시           | 대시           |  플레이어A, 플레이어B HP 1 감소         |
+----------------+----------------+-----------------------------------------+

<퍽-벽 간 접촉 시: 퍽 충격량과 데미지>

레벨의 4방향 (동서남북) 벽과 퍽의 접촉 시마다, 퍽의 충격량에 1이 더해진다.
충격량이 더해지는 것은 벽과 퍽의 접촉 시점에서 1번이므로,
같은 벽에 계속 접촉되어 있더라도 충격량이 1을 초과해 증가하지 않는다.
퍽의 충격량의 상한은 100이다.

플레이어-퍽 접촉 시 감소하는 플레이어의 HP는 그 시점에서 퍽의 충격량이다.
플레이어-퍽 접촉 후 퍽의 충격량은 1로 리셋된다.

<퍽-벽 접촉의 문제: 퍽이 구석에 끼거나 벽에 접촉한 채로 정지했을 때>

레벨의 형태가 정사각형이므로, 퍽이 구석이나 벽에 접촉한 채로 정지하기 쉽다.
플레이어와 퍽, 벽 모두 탄성이 있으므로, 이 경우에도 강력한 플레이어-퍽 간
접촉을 일으켜 퍽을 가장자리에서 다시 가져오는 것이 불가능한 것은 아니다.
그러나, 이러한 퍽-벽 접촉이 일어난 상태의 퍽을 다시 공격 도구로 삼기 위해
강력한 접촉을 일으키는 것이 까다롭고, 플레이어 스스로 조작 중 데미지를 입을
확률이 높으므로 나쁜 플레이 경험을 하게 된다.
이에 대한 해결책은 [[아직 없음...]]

[5] 퍽 패링

플레이어-퍽 접촉이 일어나기 직전에 플레이어가 대시를 통해 대시 직후 퍽과
접촉시키는 경우 퍽 패링이 일어난다.
퍽의 소유권 개념이 들어가면 확대시킬 수 있는 개념


[5] 퍽

대전 도중 스폰되는 특수 퍽, 퍽 융합(퍽 끼리 충돌 시), ...

특수퍽 브레인스토밍
 - 빠른 속도로 충돌하면 HP가 회복되는 퍽


플레이어가 이동 상태에서 중 정지 퍽에 접촉하면 정지 퍽은 이동을 시작하며, 이때부터 이동 퍽이 된다.

플레이어가 이동 퍽과 접촉하면 플레이어의 HP가 감소한다.

단, 플레이어가 이동 퍽과 접촉 직전에 (아주 가까운 거리에서) 

즉, 플레이어는 


[2] 점수 규칙



[3] 조작

플레이어 스피드, 회피, ---> 스태미너
HP -> 1방?

퍽과 접촉하면 바로 퍽 발사? --> 이 경우 플레이어 방향성이란 개념은 사라짐

플레이어 이동 방식 --> 마지막으로 터치 이동한 방향 (touch delta)로 계속 이동?
아니면 버추얼 스틱 방식?



인증/매칭 프로토콜 (TCP)

전투 프로토콜 (UDP)

- 구글 플레이 로그인 --> 서버 검증
- 기기 고유 토큰 (없는 경우 생성. 유저가 일부러 지울 수도 있는데, 이 경우 재생성): 16-byte

매칭 절차

C->S: 매칭 요청 패킷 (WAITING) --> 매칭 완료 패킷 받을 때 까지 반복

S->C: 매칭 완료 패킷 (ESTABLISHED) 두 유저에게 보냄 [두 개의 서로 다른 유저의 WAITING 감지 시]

C->S: 매칭 완료 확인 패킷(GOTIT) --> 매칭 완료 패킷 받을 때 까지 반복

서버 패킷


세션토큰 - 8바이트?

