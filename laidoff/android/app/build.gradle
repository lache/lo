apply plugin: 'com.android.application'

android.buildFeatures.buildConfig true

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()


// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def versionProperties = new Properties()

versionProperties['versionCode'] = "1458"
versionProperties['versionName'] = "0.1.1"

if (keystoreProperties.containsKey('versionCode')) {
    versionProperties['versionCode'] = keystoreProperties['versionCode']
}

if (project.hasProperty('versionName')) {
    versionProperties['versionName'] = project.versionName
}

if (project.hasProperty('versionCode')) {
    versionProperties['versionCode'] = project.versionCode
}

android {
    namespace "com.popsongremix.laidoff"
    compileSdk 34
    publishNonDefault true

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        debugSign {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    ndkVersion "25.1.8937393"

    defaultConfig {
        applicationId "com.popsongremix.laidoff"
        minSdkVersion 19
        targetSdkVersion 34

        versionCode versionProperties['versionCode'] as int
        versionName versionProperties['versionName']

        /*ndk {
            abiFilters 'armeabi-v7a','arm64-v8a', 'x86', 'x86_64'
        }*/

        externalNativeBuild {
            cmake {
                //arguments '-DANDROID_PLATFORM=android-28','-DANDROID_TOOLCHAIN=clang'
                //arguments "-DANDROID_STL=c++_shared"
                arguments "-DANDROID_STL=c++_static"
            }
        }

        signingConfig signingConfigs.config
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debugSign
            buildConfigField "boolean", "DOWNLOAD_ASSETS", "false"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            buildConfigField "boolean", "DOWNLOAD_ASSETS", "true"
        }
        releaseSingapore {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            buildConfigField "boolean", "DOWNLOAD_ASSETS", "false"
        }
        releaseEmulator {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            /*ndk {
                abiFilters 'x86', 'x86_64'
            }*/
            buildConfigField "boolean", "DOWNLOAD_ASSETS", "true"
        }
        releaseBallRumbleGooglePlay {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            buildConfigField "boolean", "DOWNLOAD_ASSETS", "false"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a','arm64-v8a', 'x86', 'x86_64'
        }
    }

    sourceSets {
        //debug.assets.srcDirs += '../../assets'
        debug.assets.srcDirs += '../../selected-assets-br/assets'
        releaseSingapore.assets.srcDirs += '../../selected-assets-br/assets'
        releaseBallRumbleGooglePlay.assets.srcDirs += '../../selected-assets-br/assets'
        //releaseBallRumbleGooglePlay.assets.srcDirs += '../../assets'
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    aaptOptions {
        noCompress 'act',
                'arm',
                'json',
                'txt',
                'fanim',
                'field',
                'fnt',
                'tga',
                'fvbo',
                'glsl',
                'ktx',
                'lua',
                'nav',
                'ogg',
                'pkm',
                'svbo',
                'png',
                'vbo',
                'css',
                'html',
                'mvbo',
                'asf',
                'amc'
    }
}

configurations {
    // Expose the debug version of the library to other modules
    debug
    release
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation 'com.google.firebase:firebase-messaging:23.4.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}

apply plugin: 'com.google.gms.google-services'

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

import com.android.build.OutputFile

android.applicationVariants.configureEach { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 100000 + variant.versionCode
        }
    }
}